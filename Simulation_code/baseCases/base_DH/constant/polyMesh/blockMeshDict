/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1e-5;

vertices
(

   (-50 -50 0)
   (50 -50 0)
   (50 50 0)
   (-50 50 0)
   (-0.7071067812 -0.7071067812 0)
   (0.7071067812 -0.7071067812 0)
   (0.7071067812 0.7071067812 0)
   (-0.7071067812 0.7071067812 0)

   (-50 -50 1)
   (50 -50 1)
   (50 50 1)
   (-50 50 1)
   (-0.7071067812 -0.7071067812 1)
   (0.7071067812 -0.7071067812 1)
   (0.7071067812 0.7071067812 1)
   (-0.7071067812 0.7071067812 1)
  

);

blocks
(
    hex (0 1 5 4 8 9 13 12) B0 (80 80 1) simpleGrading (1 2.7369173e-03 1) //0
    hex (1 2 6 5 9 10 14 13) B1 (80 80 1) simpleGrading (1 2.7369173e-03 1) //1
    hex (2 3 7 6 10 11 15 14) B2 (80 80 1) simpleGrading (1 2.7369173e-03 1) //2
    hex (3 0 4 7 11 8 12 15) B3 (80 80 1) simpleGrading (1 2.7369173e-03 1) //3 
);

edges
(
  arc 5 6 (1 0 0)
  arc 6 7 (0 1 0) 
  arc 7 4 (-1 0 0)
  arc 4 5 (0 -1 0)

  arc 13 14 (1 0 1)
  arc 14 15 (0 1 1) 
  arc 15 12 (-1 0 1)
  arc 12 13 (0 -1 1)
);

boundary
(
    elecNorth
    {
      type patch;
      faces
      (
            (3 2 10 11)   
      );
    }
    wallEast
    {
        type wall;
        faces
        (
            (1 2 10 9)                
        );
    }
    wallWest
    {
        type wall;
        faces
        (
            (0 3 11 8)                
        );
    }
    elecSouth
     {
      type patch;
      faces
      (
            (0 1 9 8)   
        );
    }
    cylinder
    {
        type wall;
        faces
        (          
            (4 5 13 12)
            (5 6 14 13)
            (6 7 15 14)
            (7 4 12 15)            
        );
    }    
    frontAndBack
    {
        type empty;
        faces
        (
            (0 1 5 4)
            (5 1 2 6)
            (3 7 6 2)
            (0 4 7 3)
            (8 9 13 12)
            (9 10 14 13)
            (15 14 10 11)
            (8 12 15 11)             
        );
    }
);

mergePatchPairs
(
);
// ************************************************************************* //
